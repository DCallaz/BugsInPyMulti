#!env/bin/python3
import inspect
import importlib
import sys
import dis
import os
import re
import glob
from pathlib import Path


# Get all the imports and required functions used in this attribute
def getDependencies(attr, full_code):
    calls = {}
    if (inspect.isclass(attr)):
        attr = compile(inspect.getsource(attr), '<string>', 'exec')
    elif (hasattr(attr, '_pytestfixturefunction') and hasattr(attr, '__dict__')
          and '__wrapped__' in attr.__dict__):
        attr = attr.__dict__['__wrapped__']
    instrs = list(dis.get_instructions(attr))[::-1]
    list_comps = [i.argval for i in list(reversed(instrs))
                  if i.opname == 'LOAD_CONST' and inspect.iscode(i.argval)]
    for lc in list_comps:
        instrs += list(dis.get_instructions(lc))[::-1]
    # Add function calls and imports
    for (i, instr) in enumerate(reversed(instrs)):
        if (instr.opname == 'LOAD_GLOBAL' or instr.opname == 'LOAD_NAME'):
            calls[instr.argval] = 'import'
        if (instr.opname.startswith('CALL_FUNCTION')):
            offset = 0
            if (instr.opname.endswith('KW')):
                offset = 1
            argval = instrs[len(instrs)-i+instr.arg+offset].argval
            if (argval in calls):
                calls[argval] = 'function'
    # Add fixture calls if pytest function
    if (inspect.isroutine(attr) and "pytest" in full_code):
        calls['pytest'] = 'import'
        for param in inspect.signature(attr).parameters:
            calls[param] = 'function'
        m = [i[1] for i in inspect.getmembers(attr) if i[0] == 'pytestmark']
        if (m):
            for mark in m[0]:
                if (mark.name == 'parametrize'):
                    params = mark.args[0].split(', ')
                elif (mark.name == 'usefixtures' or hasattr(mark, 'args')):
                    params = list(mark.args)
                else:
                    params = []
                for param in params:
                    if (param != ""):
                        calls[param] = 'function'
    # Add decorator calls
    if (hasattr(attr, "__name__")):
        decor_calls = re.search("\n((?:@.*\n)*)def {}\(".format(attr.__name__),
                                full_code)
        if (decor_calls):
            for call in decor_calls.group(1).strip().split("\n"):
                name = re.match("@([^(]*)\(?", call).group(1)
                calls[name] = 'function'
    return calls


def validFilename(filename):
    return re.match("[A-Za-z0-9._-]", filename) is not None


if __name__ == "__main__":
    end = "# BLOCK\n"
    if (len(sys.argv) < 2):
        print("USAGE: bugsinpy-cut <test file> [<test class>] <test_method>")
        quit()
    sys.path.insert(0, os.getcwd())
    sys.path.append(os.path.dirname(sys.argv[1].replace(".", "/")+".py"))
    init_file = None
    init_file_created = False
    if (Path('tests/').exists()):
        init_file = Path('tests/__init__.py')
        if (not init_file.exists()):
            init_file.touch()
            init_file_created = True
    try:
        test_module = importlib.import_module(sys.argv[1])
    except ModuleNotFoundError as mnf:
        print("CUT ERROR: module not found error for", *sys.argv[1:], file=sys.stderr)
        print("ModuleNotFoundError:", mnf, file=sys.stderr)
        quit()
    except ImportError as impe:
        print("CUT ERROR: import error for", *sys.argv[1:], file=sys.stderr)
        print("ImportError:", impe, file=sys.stderr)
        quit()
    if (len(sys.argv) == 4):
        test_class = getattr(test_module, sys.argv[2])
        test_method = getattr(test_class, sys.argv[3])
    else:
        test_class = None
        test_method = getattr(test_module, sys.argv[2])
    code, _ = inspect.findsource(test_module)
    full_code = inspect.getsource(test_module)
    calls = getDependencies(test_method, full_code)
    pat = ("[ \t]*(?:from[ \t]+[A-z0-9_.]+)?[ \t]*import[ \t]+"
           "(?:[A-z0-9_., \t]+|\\[\s]+|\([A-z0-9_.,\s]+\))")
    all_imports = re.findall(pat, full_code)
    imports_to_add = {}
    funcs_to_print = []
    while calls:
        new_calls = {}
        for (name, type_) in calls.items():
            name = str(name)
            # Check both functions and imports
            if (type_ == 'function' or type_ == 'import'):
                gv_search = re.search("\n\n((?:.|[^\n]\n)*\n\s*{}\s*=[\s\S]*?\n)\n".format(name), full_code)
                test_contain = None
                # check if the module or class contains the attribute
                if (hasattr(test_module, name)):
                    test_contain = test_module
                elif (test_class and hasattr(test_class, name)):
                    test_contain = test_class
                attr = None
                # check if the attribute is a routine or class
                if (test_contain and
                        (inspect.isroutine(getattr(test_contain, name)) or
                         inspect.isclass(getattr(test_contain, name)))):
                    attr = getattr(test_contain, name)
                    try:
                        used = inspect.getsource(attr)
                    except (OSError, TypeError):
                        used = ""
                # check if the attribute is a global variable
                elif (gv_search):
                    used = gv_search.group(1)
                    try:
                        attr = compile(used, '<string>', 'exec')
                    except SyntaxError:
                        used = ""
                        attr = None
                else:
                    used = ""
                if (used and used in full_code):
                    if (used not in funcs_to_print):
                        funcs_to_print.append(used)
                        new_calls.update(getDependencies(attr, full_code))
                else:  # change type to import if not found in code
                    type_ = 'import'
            if (type_ == 'import'):
                cond_imp = re.search(("try:\n"
                                      "(\s*.\n)*.*import\s+"+str(name)+".*\n"
                                      "except.*\n"
                                      "([ \t]+.+\n)*"
                                      ), full_code)
                cond_imp = cond_imp or re.search(("if(\s+|\().*\n"
                                      "(\s*.\n)*.*import\s+"+str(name)+".*\n"
                                      "else.*\n"
                                      "([ \t]+.+\n)*"
                                      ), full_code)
                if (cond_imp):
                    funcs_to_print.append(cond_imp.group(0))
                else:
                    r = re.compile(("^[\s]*(?:from ([A-z0-9_.]+))?[\s]*"
                                    "import(?:.|\n)*[\s,]+(" + str(name)+")"
                                    "(?:[\s,]+|$)"))
                    imports = [r.match(val).groups()
                               for val in all_imports if r.match(val)]
                    for package, imp in imports:
                        imports_to_add.setdefault(package, [])
                        if (imp not in imports_to_add[package]):
                            imports_to_add[package].append(imp)
        # Only process calls that haven't been processed yet
        for call in calls:
            if (call in new_calls):
                del new_calls[call]
        calls = new_calls
    # print each import needed
    for package, imps in imports_to_add.items():
        if (package):
            if (len(imps) < 4):
                print("from", package, "import", ", ".join(imps), end="\n"+end)
            else:
                print("from", package, "import (\n", end="")
                for imp in imps:
                    print("\t".expandtabs(4)+imp+",")
                print(")\n", end=end)
        else:
            for imp in imps:
                print("import", imp, end="\n"+end)
    # print each function needed
    for func in reversed(funcs_to_print):
        print(func, end=end)
    # Get this test source
    print(inspect.getsource(test_method), end="")
    consts = list(test_method.__code__.co_consts)
    if ('__wrapped__' in test_method.__dict__):
        consts.extend(test_method.__dict__['__wrapped__'].__code__.co_consts)
    used_files = []
    for const in consts:
        if (const is not None and type(const) is str and const != "" and
                validFilename(const)):
            if (os.path.isfile(const)):
                used_files.append(const)
            else:
                found = False
                for const_ext in glob.glob(str(const)+".*"):
                    if (os.path.isfile(const_ext)):
                        used_files.append(const_ext)
                    found = True
                if (not found):
                    for const_ext in glob.glob("test*/**/"+str(const)+".*", recursive=True):
                        if (os.path.isfile(const_ext)):
                            used_files.append(const_ext)
    for f in used_files:
        try:
            file = open(f)
            lines = file.read()
        except (OSError, UnicodeDecodeError):
            continue
        print("# FILE:", f)
        print(lines.rstrip('\n'))
    if (init_file_created):
        init_file.unlink()
