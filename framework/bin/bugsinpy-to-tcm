#!/bin/python3
import sys
import json
import subprocess
import re

usage = "USAGE: bugsinpy-to-tcm [<coverage.py json report> [<tcm output file>]]"

cov_file = "coverage.json"
tcm_file = "coverage.tcm"
if (len(sys.argv) > 1):
    cov_file = sys.argv[1]
if (len(sys.argv) > 2):
    tcm_file = sys.argv[2]
js = json.load(open(cov_file))
tests = []
locs = []
coverage = {}
for file, content in js['files'].items():
    for line, context in content['contexts'].items():
        loc = str(file) + ":" + str(line)
        if (loc in locs):
            j = locs.index(loc)
        else:
            j = len(locs)
            locs.append(loc)
        for test in context:
            if (test == ""):
                continue
            if (test in tests):
                i = tests.index(test)
            else:
                i = len(tests)
                tests.append(test)
            coverage.setdefault(i, []).append(j)
if (subprocess.getoutput('grep unittest bugsinpy_run_test.sh')):
    failed = subprocess.getoutput('grep "^\\(ERROR\\|FAIL\\):" coverage_alltest_bugsinpy.txt')
    pat = "^(?:ERROR|FAIL): (\S+) \((.*)\)"
    failed = failed.splitlines()
    for i in range(len(failed)):
        print(failed[i])
        match = re.match(pat, failed[i])
        failed[i] = match.group(2) + "." + match.group(1)
else:
    failed = subprocess.getoutput('grep "^FAILED" coverage_alltest_bugsinpy.txt')
    failed = failed.splitlines()
    for i in range(len(failed)):
        _, _, failed[i] = str(failed[i]).partition('  ')
        failed[i] = failed[i].replace(".py", "").replace("::", ".").replace("/", ".")
tcm = open(tcm_file, 'w')
print("#tests", file=tcm)
for test in tests:
    status = "FAILED" if (len([1 for fail in failed if fail.startswith(test)]) > 0) else "PASSED"
    print(test, status, file=tcm)
print(file=tcm)
print("#uuts", *locs, sep="\n", file=tcm)
print(file=tcm)
print("#matrix", file=tcm)
for test in coverage:
    for loc in coverage[test]:
        print(loc, 1, end=" ", file=tcm)
    print(file=tcm)
