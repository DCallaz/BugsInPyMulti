#!env/bin/python3
import inspect
import importlib.util
import importlib
import sys
import os
import re
from pathlib import Path


def linesin(imprt, test, code):
    """
    Gets the lines of the import <imprt> in the code. Overrides the import to
    include lines that appear in code and not in the import.
    """
    start = -1
    while (start < len(code)):
        try:
            start = code.index(imprt[0], start+1)
        except ValueError:
            return None
        cur = 1
        end = start + 1
        while (cur < len(imprt) and end < len(code)):
            if (imprt[cur] == code[end]):
                cur += 1
                end += 1
            elif (code[end] in imprt[cur:]):
                # new = imprt.index(code[end], cur)
                # for i in range(new-1, cur-1, -1):
                #     for iden in re.findall("[A-z0-9_]+", imprt[i]):
                #         if (iden in test):
                #             break
                #     else:
                #         imprt.pop(i)
                cur = imprt.index(code[end], cur)
            elif (code[end] == '\n'):
                return (start, end-1)
            elif ("import" in code[end]):
                imprt.insert(cur, code[end])
            else:
                end += 1
        if (cur == len(imprt)):
            return (start, end-1)
    return None


def is_import(code):
    pat = ("[ \t]*(?:from[ \t]+[A-z0-9_.]+)?[ \t]*import[ \t]+"
           "(?:[A-z0-9_., \t]+|\\[\s]+|\([A-z0-9_.,\s]+\))\n?")
    if (re.fullmatch(pat, code)):
        return True
    return False


if __name__ == "__main__":
    if (len(sys.argv) < 2):
        print("USAGE: bugsinpy-splice <test file> [<test class>] <test_method>")
        quit()
    sys.path.insert(0, os.getcwd())
    sys.path.append(os.path.dirname(sys.argv[1].replace(".", "/")+".py"))
    init_file = None
    m = re.match("(.*?test[^/]*)/", sys.argv[1].replace('.', '/'))
    if (m and Path(m.group(1)).is_dir()):
        test_dir = m.group(1)
        sys.path.append(test_dir)
        init_file = Path(test_dir+'/__init__.py')
        if (not init_file.exists()):
            init_file.touch()
        else:
            init_file = None
    test_file = sys.argv[1]
    test_method = sys.argv[-1]
    test_class = None
    if (len(sys.argv) == 4):
        test_class = sys.argv[2]
    full_diff = sys.stdin.read()
    full_diff, *files = full_diff.split("# FILE: ")
    # get the class line if it exists and remove from full_diff
    class_line = None
    if ("# CLASS:" in full_diff):
        class_line_match = re.search("# CLASS: (.*\n)", full_diff)
        if (class_line_match):
            class_line = class_line_match.group(1)
            full_diff = full_diff.replace(class_line_match.group(0), "")
    cut_parts = full_diff.split('# BLOCK\n')
    try:
        test_exists = importlib.util.find_spec(test_file) is not None
    except ModuleNotFoundError:
        test_exists = False
    if (test_exists):
        test_module = importlib.import_module(test_file)
        code, m_sloc = inspect.findsource(test_module)
        m_sloc = max(0, m_sloc-1)
        m_eloc = m_sloc + len(code) - 1
        test_c_module = None
        if (test_class is not None):
            if (hasattr(test_module, test_class)):
                test_c_module = getattr(test_module, test_class)
                class_source, c_sloc = inspect.getsourcelines(test_c_module)
                c_sloc = max(0, c_sloc-1)
                c_eloc = c_sloc + len(class_source) - 1
            else:  # If the class doesn't exist, add the class description
                if (not class_line):
                    class_line = "class "+test_class+":\n"
        if (class_line):
            cut_parts.append(class_line)
        splices = []
        # inject each block into the code
        for part in reversed(cut_parts):
            method_name_re = re.search("\s*(def|class)\s+([A-z0-9_]+)\s*(?:\(|:)", part)
            method_name = method_name_re.group(2) if method_name_re else None
            splice = part.splitlines(True)
            if (method_name is None and linesin(splice, cut_parts[-1], code)):
                sloc, eloc = linesin(splice, cut_parts[-1], code)
            # Update the method if it exists
            elif (method_name and hasattr(test_module, method_name)):
                test_lines = inspect.getsourcelines(getattr(test_module, method_name))
                sloc, eloc = (test_lines[1]-1, test_lines[1]+len(test_lines[0])-2)
                if (method_name_re.group(1) == "class"):
                    eloc = sloc
            elif (method_name and test_c_module and hasattr(test_c_module, method_name)):
                test_lines = inspect.getsourcelines(getattr(test_c_module, method_name))
                sloc, eloc = (test_lines[1]-1, test_lines[1]+len(test_lines[0])-2)
                if (method_name_re.group(1) == "class"):
                    eloc = sloc
            else:
                skip = False
                if (test_c_module and splice[0].startswith((' ', '\t'))):
                    if (is_import(part)):
                        sloc = c_sloc
                        skip = True
                    else:
                        sloc = c_eloc
                else:
                    if (is_import(part)):
                        sloc = m_sloc
                        skip = True
                    else:
                        sloc = m_eloc
                # skip comments, variable declarations & imports
                if (skip):
                    while (sloc+1 < len(code) and (code[sloc+1].strip() == "" or
                           "import" in code[sloc+1] or "except" in code[sloc+1] or
                           code[sloc+1].startswith("#") or code[sloc].strip() != "")):
                        sloc += 1
                else:
                    sloc += 1
                # add blank line before and after
                if (sloc >= len(code)):
                    code.append("\n")
                sloc += 1
                eloc = sloc - 2
            splices.append((sloc, eloc, splice))
            # print(*code, sep="", end="")
        # Sort by start, then end location and then indentation and then imports
        splices.sort(key=lambda x: (x[0], x[1], x[2][0].startswith((' ', '\t')),
                     not is_import("\n".join(x[2]))), reverse=True)
        for s in splices:
            sloc, eloc, splice = s
            code = code[:sloc] + splice + code[eloc+1:]
    else:
        code_parts = full_diff.split("# BLOCK\n")
        if (test_class is not None):
            # insert the class starter after imports
            i = 0
            while (i < len(code_parts) and not code_parts[i].startswith(("\t", " "))):
                i += 1
            code_parts.insert(i, class_line if (class_line)
                                    else "class "+test_class+":\n")
        if ("pytest" in full_diff):
            code_parts.insert(0, "import pytest\n")
        code = []
        for part in code_parts:
            code.extend(part.splitlines(True))
            code.append("\n")
        code.pop()
    filename = test_file.replace('.', '/')+".py"
    if (os.path.dirname(filename) != ''):
        os.makedirs(os.path.dirname(filename), exist_ok=True)
    test_file_out = open(filename, 'w')
    print(*code, sep="", end="", file=test_file_out)
    test_file_out.close()
    for f in files:
        filename, *lines = f.splitlines()
        if (os.path.dirname(filename) != ''):
            os.makedirs(os.path.dirname(filename), exist_ok=True)
        file_out = open(filename, 'w')
        print(*lines, sep="\n", file=file_out)
        file_out.close()
    if (init_file):
        init_file.unlink()
