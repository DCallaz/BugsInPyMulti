# CLASS: class CentralPlannerTest(unittest.TestCase):
from luigi.scheduler import PENDING, DONE, DISABLED, FAILED
# BLOCK
from helpers import unittest
# BLOCK
    def test_assistants_dont_nurture_finished_statuses(self):
        """
        Assistants should not affect longevity of DONE tasks

        Also check for statuses DISABLED and UNKNOWN.
        """
        self.sch = CentralPlannerScheduler(retry_delay=100000000000)  # Never pendify failed tasks
        self.setTime(1)
        self.sch.add_worker('assistant', [('assistant', True)])
        self.sch.ping(worker='assistant')
        self.sch.add_task(worker='uploader', task_id='running', status=PENDING)
        self.assertEqual(self.sch.get_work(worker='assistant', assistant=True)['task_id'], 'running')

        self.setTime(2)
        self.sch.add_task(worker='uploader', task_id='done', status=DONE)
        self.sch.add_task(worker='uploader', task_id='disabled', status=DISABLED)
        self.sch.add_task(worker='uploader', task_id='pending', status=PENDING)
        self.sch.add_task(worker='uploader', task_id='failed', status=FAILED)
        self.sch.add_task(worker='uploader', task_id='unknown', status=UNKNOWN)

        self.setTime(100000)
        self.sch.ping(worker='assistant')
        self.sch.prune()

        self.setTime(200000)
        self.sch.ping(worker='assistant')
        self.sch.prune()
        nurtured_statuses = ['PENDING', 'FAILED', 'RUNNING']
        not_nurtured_statuses = ['DONE', 'UNKNOWN', 'DISABLED']

        for status in nurtured_statuses:
            print(status)
            self.assertEqual(set([status.lower()]), set(self.sch.task_list(status, '')))

        for status in not_nurtured_statuses:
            print(status)
            self.assertEqual(set([]), set(self.sch.task_list(status, '')))

        self.assertEqual(3, len(self.sch.task_list(None, '')))  # None == All statuses
