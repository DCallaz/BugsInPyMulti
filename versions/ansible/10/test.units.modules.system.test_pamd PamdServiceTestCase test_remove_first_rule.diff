from ansible.modules.system.pamd import PamdService, PamdRule
# BLOCK
    def test_remove_first_rule(self):
        no_header_service = PamdService(self.no_header_system_auth_string)
        self.assertTrue(no_header_service.remove('auth', 'required', 'pam_env.so'))
        test_rule = PamdRule('auth', 'required', 'pam_env.so')
        self.assertNotIn(str(test_rule), str(no_header_service))
# FILE: test/integration/targets/eos_user/tests/cli/auth.yaml
---
- block:
  - name: Create user with password
    eos_user:
      name: auth_user
      privilege: 15
      role: network-operator
      state: present
      provider: "{{ cli }}"
      configured_password: pass123
    become: yes

  - name: test login
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no show version"
      responses:
        (?i)password: "pass123"

  - name: test login with invalid password (should fail)
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no show version"
      responses:
        (?i)password: "badpass"
    ignore_errors: yes
    register: results

  - name: check that attempt failed
    assert:
      that:
        - results.failed

  always:
  - name: delete user
    eos_user:
      name: auth_user
      state: absent
      provider: "{{ cli }}"
    become: yes
    register: result
# FILE: test/integration/targets/nxos_user/tests/common/auth.yaml
---
- block:
  - name: Create user with password
    nxos_user:
      name: auth_user
      role: network-operator
      state: present
      configured_password: pasS!123

  - name: test login
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PubkeyAuthentication=no show version"
      responses:
        (?i)password: "pasS!123"

  - name: test login with invalid password (should fail)
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PubkeyAuthentication=no show version"
      responses:
        (?i)password: "badpass"
    ignore_errors: yes
    register: results

  - name: check that attempt failed
    assert:
      that:
        - results.failed

  always:
  - name: delete user
    nxos_user:
      name: auth_user
      state: absent
    register: result
# FILE: test/integration/targets/iosxr_user/tests/common/auth.yaml
---
- block:
  - name: Create user with password
    iosxr_user:
      name: auth_user
      state: present
      configured_password: pass123
      provider: "{{ cli }}"
    connection: network_cli

  - name: test login
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no show version"
      responses:
        (?i)password: "pass123"
    connection: network_cli

  - name: test login with invalid password (should fail)
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no show version"
      responses:
        (?i)password: "badpass"
    ignore_errors: yes
    connection: network_cli
    register: results

  - name: check that attempt failed
    assert:
      that:
        - results.failed

  - name: create user with private key (contents input)
    iosxr_user:
      name: auth_user
      state: present
      public_key_contents: "{{ lookup('file', \"{{ role_path }}/files/public.pub\") }}"
      provider: "{{ cli }}"
    connection: network_cli

  - name: test login with private key
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ role_path }}/files/private show version"
      responses:
        (?i)password: 'pass123'
    connection: network_cli

  - name: remove user and key
    iosxr_user:
      name: auth_user
      provider: "{{ cli }}"
      state: absent
    connection: network_cli

  - name: test login with private key (should fail, no user)
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ role_path }}/files/private show version"
      responses:
        (?i)password: 'pass123'
    ignore_errors: yes
    connection: network_cli
    register: results

  - name: create user with private key (path input)
    iosxr_user:
      name: auth_user
      state: present
      public_key: "{{ role_path }}/files/public.pub"
      provider: "{{ cli }}"
    connection: network_cli

  - name: test login with private key
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ role_path }}/files/private show version"
      responses:
        (?i)password: 'pass123'
    ignore_errors: yes
    connection: network_cli

  - name: change private key for user
    iosxr_user:
      name: auth_user
      state: present
      public_key_contents: "{{ lookup('file', \"{{ role_path }}/files/public2.pub\") }}"
      provider: "{{ cli }}"
    connection: network_cli

  # FIXME: pexpect fails with OSError: [Errno 5] Input/output error
  - name: test login with invalid private key (should fail)
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ role_path }}/files/private show version"
      responses:
        (?i)password: "pass123"
    ignore_errors: yes
    connection: network_cli
    register: results

  - name: check that attempt failed
    assert:
      that:
        - results.failed

  always:
  - name: delete user
    iosxr_user:
      name: auth_user
      state: absent
      provider: "{{ cli }}"
    connection: network_cli
    register: result
# FILE: test/integration/targets/ios_user/tests/cli/auth.yaml
---
- block:
  - name: Create user with password
    ios_user:
      name: auth_user
      privilege: 15
      role: network-operator
      state: present
      provider: "{{ cli }}"
      configured_password: pass123

  - name: test login
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PubkeyAuthentication=no show version"
      responses:
        (?i)password: "pass123"

  - name: test login with invalid password (should fail)
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PubkeyAuthentication=no show version"
      responses:
        (?i)password: "badpass"
    ignore_errors: yes
    register: results

  - name: check that attempt failed
    assert:
      that:
        - results.failed

  always:
  - name: delete user
    ios_user:
      name: auth_user
      state: absent
      provider: "{{ cli }}"
    register: result

  - name: reset connection
    meta: reset_connection


- block:
  - name: Ensure ssh key is not world readable
    file:
      path: "{{ role_path }}/files/test_rsa"
      mode: 0600

  - name: Create user with sshkey
    ios_user:
      name: ssh_user
      privilege: 15
      role: network-operator
      state: present
      provider: "{{ cli }}"
      sshkey: "{{ lookup('file', 'files/test_rsa.pub') }}"

  - name: test sshkey login
    shell: "ssh ssh_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o IdentityFile={{ role_path }}/files/test_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o BatchMode=yes -o PubkeyAuthentication=yes show version"

  - name: test login without sshkey (should fail)
    expect:
      command: "ssh ssh_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PubkeyAuthentication=no show version"
      responses:
        (?i)password: badpass
    ignore_errors: yes
    register: results

  - name: check that attempt failed
    assert:
      that:
        - results.failed

  always:
  - name: delete user
    ios_user:
      name: ssh_user
      state: absent
      provider: "{{ cli }}"
    register: result

  - name: reset connection
    meta: reset_connection
# FILE: test/integration/targets/vyos_user/tests/cli/auth.yaml
---
- block:
  - name: Create user with password
    vyos_user:
      name: auth_user
      role: admin
      state: present
      configured_password: pass123

  - name: test login via ssh with new user
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_port | default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no '/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper show version'"
      responses:
        (?i)password: "pass123"

  - name: test login via ssh with invalid password (should fail)
    expect:
      command: "ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_port | default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no '/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper show version'"
      responses:
        (?i)password: "badpass"
    ignore_errors: true
    register: results

  - name: check that attempt failed
    assert:
      that:
        - results.failed

  always:
    - name: delete user
      vyos_user:
        name: auth_user
        state: absent
      register: result
