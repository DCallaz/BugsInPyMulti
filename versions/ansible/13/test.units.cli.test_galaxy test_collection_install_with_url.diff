from ansible.cli.galaxy import GalaxyCLI
# BLOCK
import os
# BLOCK
import pytest
# BLOCK
import ansible
# BLOCK
from units.compat.mock import MagicMock
# BLOCK
from ansible.module_utils._text import to_text
# BLOCK
from ansible.utils import co
# BLOCK
@pytest.fixture(autouse='function')
def reset_cli_args():
    co.GlobalCLIArgs._Singleton__instance = None
    yield
    co.GlobalCLIArgs._Singleton__instance = None
# BLOCK
@pytest.fixture()
def collection_install(reset_cli_args, tmp_path_factory, monkeypatch):
    mock_install = MagicMock()
    monkeypatch.setattr(ansible.cli.galaxy, 'install_collections', mock_install)

    mock_warning = MagicMock()
    monkeypatch.setattr(ansible.utils.display.Display, 'warning', mock_warning)

    output_dir = to_text((tmp_path_factory.mktemp('test-ÅÑŚÌβŁÈ Output')))
    yield mock_install, mock_warning, output_dir
# BLOCK
def test_collection_install_with_url(collection_install):
    mock_install, dummy, output_dir = collection_install

    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'https://foo/bar/foo-bar-v1.0.0.tar.gz',
                   '--collections-path', output_dir]
    GalaxyCLI(args=galaxy_args).run()

    collection_path = os.path.join(output_dir, 'ansible_collections')
    assert os.path.isdir(collection_path)

    assert mock_install.call_count == 1
    assert mock_install.call_args[0][0] == [('https://foo/bar/foo-bar-v1.0.0.tar.gz', '*', None)]
    assert mock_install.call_args[0][1] == collection_path
    assert len(mock_install.call_args[0][2]) == 1
    assert mock_install.call_args[0][2][0].api_server == 'https://galaxy.ansible.com'
    assert mock_install.call_args[0][2][0].validate_certs is True
    assert mock_install.call_args[0][3] is True
    assert mock_install.call_args[0][4] is False
    assert mock_install.call_args[0][5] is False
    assert mock_install.call_args[0][6] is False
    assert mock_install.call_args[0][7] is False
# FILE: test/lib/ansible_test/_internal/provider/layout/collection.py
"""Layout provider for Ansible collections."""
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

import os

from ... import types as t

from . import (
    ContentLayout,
    LayoutProvider,
    CollectionDetail,
    LayoutMessages,
)


class CollectionLayout(LayoutProvider):
    """Layout provider for Ansible collections."""
    __module_path = 'plugins/modules'
    __unit_path = 'test/unit'

    @staticmethod
    def is_content_root(path):  # type: (str) -> bool
        """Return True if the given path is a content root for this provider."""
        if os.path.basename(os.path.dirname(os.path.dirname(path))) == 'ansible_collections':
            return True

        return False

    def create(self, root, paths):  # type: (str, t.List[str]) -> ContentLayout
        """Create a Layout using the given root and paths."""
        plugin_paths = dict((p, os.path.join('plugins', p)) for p in self.PLUGIN_TYPES)

        collection_root = os.path.dirname(os.path.dirname(root))
        collection_dir = os.path.relpath(root, collection_root)
        collection_namespace, collection_name = collection_dir.split(os.sep)

        collection_root = os.path.dirname(collection_root)

        sanity_messages = LayoutMessages()
        integration_messages = LayoutMessages()
        unit_messages = LayoutMessages()

        # these apply to all test commands
        self.__check_test_path(paths, sanity_messages)
        self.__check_test_path(paths, integration_messages)
        self.__check_test_path(paths, unit_messages)

        # these apply to specific test commands
        integration_targets_path = self.__check_integration_path(paths, integration_messages)
        self.__check_unit_path(paths, unit_messages)

        return ContentLayout(root,
                             paths,
                             plugin_paths=plugin_paths,
                             collection=CollectionDetail(
                                 name=collection_name,
                                 namespace=collection_namespace,
                                 root=collection_root,
                             ),
                             test_path='tests',
                             results_path='tests/output',
                             sanity_path='tests/sanity',
                             sanity_messages=sanity_messages,
                             integration_path='tests/integration',
                             integration_targets_path=integration_targets_path.rstrip(os.path.sep),
                             integration_vars_path='tests/integration/integration_config.yml',
                             integration_messages=integration_messages,
                             unit_path='tests/unit',
                             unit_module_path='tests/unit/plugins/modules',
                             unit_module_utils_path='tests/unit/plugins/module_utils',
                             unit_messages=unit_messages,
                             )

    @staticmethod
    def __check_test_path(paths, messages):  # type: (t.List[str], LayoutMessages) -> None
        modern_test_path = 'tests/'
        modern_test_path_found = any(path.startswith(modern_test_path) for path in paths)
        legacy_test_path = 'test/'
        legacy_test_path_found = any(path.startswith(legacy_test_path) for path in paths)

        if modern_test_path_found and legacy_test_path_found:
            messages.warning.append('Ignoring tests in "%s" in favor of "%s".' % (legacy_test_path, modern_test_path))
        elif legacy_test_path_found:
            messages.warning.append('Ignoring tests in "%s" that should be in "%s".' % (legacy_test_path, modern_test_path))

    @staticmethod
    def __check_integration_path(paths, messages):  # type: (t.List[str], LayoutMessages) -> str
        modern_integration_path = 'roles/test/'
        modern_integration_path_found = any(path.startswith(modern_integration_path) for path in paths)
        legacy_integration_path = 'tests/integration/targets/'
        legacy_integration_path_found = any(path.startswith(legacy_integration_path) for path in paths)

        if modern_integration_path_found and legacy_integration_path_found:
            messages.warning.append('Ignoring tests in "%s" in favor of "%s".' % (legacy_integration_path, modern_integration_path))
            integration_targets_path = modern_integration_path
        elif legacy_integration_path_found:
            messages.info.append('Falling back to tests in "%s" because "%s" was not found.' % (legacy_integration_path, modern_integration_path))
            integration_targets_path = legacy_integration_path
        elif modern_integration_path_found:
            messages.info.append('Loading tests from "%s".' % modern_integration_path)
            integration_targets_path = modern_integration_path
        else:
            messages.error.append('Cannot run integration tests without "%s" or "%s".' % (modern_integration_path, legacy_integration_path))
            integration_targets_path = modern_integration_path

        return integration_targets_path

    @staticmethod
    def __check_unit_path(paths, messages):  # type: (t.List[str], LayoutMessages) -> None
        modern_unit_path = 'tests/unit/'
        modern_unit_path_found = any(path.startswith(modern_unit_path) for path in paths)
        legacy_unit_path = 'tests/units/'  # test/units/ will be covered by the warnings for test/ vs tests/
        legacy_unit_path_found = any(path.startswith(legacy_unit_path) for path in paths)

        if modern_unit_path_found and legacy_unit_path_found:
            messages.warning.append('Ignoring tests in "%s" in favor of "%s".' % (legacy_unit_path, modern_unit_path))
        elif legacy_unit_path_found:
            messages.warning.append('Rename "%s" to "%s" to run unit tests.' % (legacy_unit_path, modern_unit_path))
        elif modern_unit_path_found:
            pass  # unit tests only run from one directory so no message is needed
        else:
            messages.error.append('Cannot run unit tests without "%s".' % modern_unit_path)
# FILE: test/lib/ansible_test/_data/sanity/pylint/config/collection.cfg
[MESSAGES CONTROL]

disable=
    abstract-method,
    access-member-before-definition,
    ansible-deprecated-version,
    arguments-differ,
    assignment-from-no-return,
    assignment-from-none,
    attribute-defined-outside-init,
    bad-continuation,
    bad-indentation,
    bad-mcs-classmethod-argument,
    broad-except,
    c-extension-no-member,
    cell-var-from-loop,
    chained-comparison,
    comparison-with-callable,
    consider-iterating-dictionary,
    consider-merging-isinstance,
    consider-using-dict-comprehension,
    consider-using-enumerate,
    consider-using-get,
    consider-using-in,
    consider-using-set-comprehension,
    consider-using-ternary,
    deprecated-lambda,
    deprecated-method,
    deprecated-module,
    eval-used,
    exec-used,
    expression-not-assigned,
    fixme,
    function-redefined,
    global-statement,
    global-variable-undefined,
    import-error,
    import-self,
    inconsistent-return-statements,
    invalid-envvar-default,
    invalid-name,
    invalid-sequence-index,
    keyword-arg-before-vararg,
    len-as-condition,
    line-too-long,
    literal-comparison,
    locally-disabled,
    method-hidden,
    misplaced-comparison-constant,
    missing-docstring,
    no-else-raise,
    no-else-return,
    no-init,
    no-member,
    no-name-in-module,
    no-self-use,
    no-value-for-parameter,
    non-iterator-returned,
    not-a-mapping,
    not-an-iterable,
    not-callable,
    old-style-class,
    pointless-statement,
    pointless-string-statement,
    possibly-unused-variable,
    protected-access,
    redefined-argument-from-local,
    redefined-builtin,
    redefined-outer-name,
    redefined-variable-type,
    reimported,
    relative-beyond-top-level,  # https://github.com/PyCQA/pylint/issues/2967
    signature-differs,
    simplifiable-if-expression,
    simplifiable-if-statement,
    subprocess-popen-preexec-fn,
    super-init-not-called,
    superfluous-parens,
    too-few-public-methods,
    too-many-ancestors,
    too-many-arguments,
    too-many-boolean-expressions,
    too-many-branches,
    too-many-function-args,
    too-many-instance-attributes,
    too-many-lines,
    too-many-locals,
    too-many-nested-blocks,
    too-many-public-methods,
    too-many-return-statements,
    too-many-statements,
    trailing-comma-tuple,
    trailing-comma-tuple,
    try-except-raise,
    unbalanced-tuple-unpacking,
    undefined-loop-variable,
    unexpected-keyword-arg,
    ungrouped-imports,
    unidiomatic-typecheck,
    unnecessary-pass,
    unsubscriptable-object,
    unsupported-assignment-operation,
    unsupported-delete-operation,
    unsupported-membership-test,
    unused-argument,
    unused-import,
    unused-variable,
    used-before-assignment,
    useless-object-inheritance,
    useless-return,
    useless-super-delegation,
    wrong-import-order,
    wrong-import-position,

[BASIC]

bad-names=foo,
          bar,
          baz,
          toto,
          tutu,
          tata,
          _,

good-names=i,
           j,
           k,
           ex,
           Run,

[TYPECHECK]

ignored-modules=
    _MovedItems,
# FILE: test/integration/targets/hg/tasks/install.yml
- name: get the default python version
  command: "{{ ansible_python_interpreter }} -V"
  register: default_python_version

- name: find the default python
  command: which python
  register: which_python

- name: find the default pip
  command: which pip
  register: which_pip

- name: preserve the default python
  command: cp -av "{{ which_python.stdout }}" "{{ which_python.stdout }}.default"

- name: preserve the default pip
  command: cp -av "{{ which_pip.stdout }}" "{{ which_pip.stdout }}.default"

# using the apt module prevents autoremove from working, so call apt-get via shell instead
- name: install mercurial (apt)
  shell: apt-get -y update && apt-get -y install mercurial
  when: ansible_pkg_mgr == 'apt'

- name: install mercurial (dnf)
  dnf:
    name: mercurial
  when: ansible_pkg_mgr == 'dnf'

- name: install mercurial (yum)
  yum:
    name: mercurial
  when: ansible_pkg_mgr == 'yum'

- name: install mercurial (pkgng)
  pkgng:
    name: mercurial
  when: ansible_pkg_mgr == 'pkgng'

- name: preserve the updated python
  command: cp -av "{{ which_python.stdout }}" "{{ which_python.stdout }}.updated"

- name: preserve the updated pip
  command: cp -av "{{ which_pip.stdout }}" "{{ which_pip.stdout }}.updated"

- name: locate mercurial
  command: which hg
  register: which_hg

- name: get the mercurial interpreter
  command: head -n 1 "{{ which_hg.stdout }}"
  register: hg_interpreter

- name: stat the mercurial interpreter
  stat:
    path: "{{ hg_interpreter.stdout[2:] }}"
  register: stat_hg_interpreter

- name: bypass the mercurial python interpreter symlink (if needed)
  lineinfile:
    path: "{{ which_hg.stdout }}"
    regexp: "^#!.*$"
    line: "#!{{ stat_hg_interpreter.stat.lnk_source }}"
  when: stat_hg_interpreter.stat.islnk

- name: restore the default python
  command: cp -av "{{ which_python.stdout }}.default" "{{ which_python.stdout }}"

- name: restore the default pip
  command: cp -av "{{ which_pip.stdout }}.default" "{{ which_pip.stdout }}"

- name: get the current python version
  command: "{{ ansible_python_interpreter }} -V"
  register: current_python_version

- name: verify the python version has not changed
  assert:
    that:
      - default_python_version.stdout == current_python_version.stdout
# FILE: test/integration/targets/setup_paramiko/install.yml
- hosts: localhost
  tasks:
    - name: Detect Paramiko
      detect_paramiko:
      register: detect_paramiko
    - name: Persist Result
      copy:
        content: "{{ detect_paramiko }}"
        dest: "{{ lookup('env', 'OUTPUT_DIR') }}/detect-paramiko.json"
    - name: Install Paramiko
      when: not detect_paramiko.found
      include_tasks: "{{ item }}"
      with_first_found:
        - "install-{{ ansible_distribution }}-{{ ansible_distribution_major_version }}-python-{{ ansible_python.version.major }}.yml"
        - "install-{{ ansible_os_family }}-{{ ansible_distribution_major_version }}-python-{{ ansible_python.version.major }}.yml"
        - "install-python-{{ ansible_python.version.major }}.yml"
        - "install-fail.yml"
