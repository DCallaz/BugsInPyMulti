from unittest.mock import MagicMock
# BLOCK
import re
# BLOCK
import black
# BLOCK
from pathlib import Path
# BLOCK
from functools import partial
# BLOCK
ll = 88
ff = partial(black.format_file_in_place, line_length=ll, fast=True)
fs = partial(black.format_str, line_length=ll)
THIS_FILE = Path(__file__)
THIS_DIR = THIS_FILE.parent
EMPTY_LINE = "# EMPTY LINE WITH WHITESPACE" + " (this comment will be removed)"
# BLOCK
    def test_symlink_out_of_root_directory(self) -> None:
        # prepare argumens
        path = MagicMock()
        root = THIS_DIR
        child = MagicMock()
        include = re.compile(black.DEFAULT_INCLUDES)
        exclude = re.compile(black.DEFAULT_EXCLUDES)
        report = black.Report()

        # set the behavior of mock arguments
        # child should behave like a symlink which resolved path is clearly
        # outside of the root directory
        path.iterdir.return_value = [child]
        child.resolve.return_value = Path("/a/b/c")
        child.is_symlink.return_value = True

        # call the method
        # it should not raise any error
        list(black.gen_python_files_in_dir(path, root, include, exclude, report))

        # check the call of the methods of the mock objects
        path.iterdir.assert_called_once()
        child.resolve.assert_called_once()
        child.is_symlink.assert_called_once()

        # set the behavior of mock arguments
        # child should behave like a strange file which resolved path is clearly
        # outside of the root directory
        child.is_symlink.return_value = False

        # call the method
        # it should raise a ValueError
        with self.assertRaises(ValueError):
            list(black.gen_python_files_in_dir(path, root, include, exclude, report))

        # check the call of the methods of the mock objects
        path.iterdir.assert_called()
        self.assertEqual(path.iterdir.call_count, 2)
        child.resolve.assert_called()
        self.assertEqual(child.resolve.call_count, 2)
        child.is_symlink.assert_called()
        self.assertEqual(child.is_symlink.call_count, 2)
