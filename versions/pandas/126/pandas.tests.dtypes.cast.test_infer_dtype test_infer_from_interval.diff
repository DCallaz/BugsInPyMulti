from pandas import Interval
# BLOCK
from pandas.core.dtypes.cast import infer_dtype_from_scalar
# BLOCK
import numpy as np
# BLOCK
import pytest
# BLOCK
@pytest.fixture(params=[True, False])
def pandas_dtype(request):
    return request.param
# BLOCK
@pytest.mark.parametrize(
    "left, right, subtype",
    [
        (0, 1, "int64"),
        (0.0, 1.0, "float64"),
        (Timestamp(0), Timestamp(1), "datetime64[ns]"),
        (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
        (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
    ],
)
def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
    # GH 30337
    interval = Interval(left, right, closed)
    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
    expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
    assert result_dtype == expected_dtype
    assert result_value == interval
