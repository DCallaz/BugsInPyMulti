# CLASS: class TestRangeIndex(Numeric):
import pytest
# BLOCK
import pandas.util.testing as tm
# BLOCK
import pandas as pd
# BLOCK
from pandas import RangeIndex, Index
# BLOCK
from .test_numeric import Numeric
# BLOCK
    def test_constructor_range(self):

        msg = "Value needs to be a scalar value, was type <class 'range'>"
        with pytest.raises(TypeError, match=msg):
            result = RangeIndex(range(1, 5, 2))

        result = RangeIndex.from_range(range(1, 5, 2))
        expected = RangeIndex(1, 5, 2)
        tm.assert_index_equal(result, expected, exact=True)

        result = RangeIndex.from_range(range(5, 6))
        expected = RangeIndex(5, 6, 1)
        tm.assert_index_equal(result, expected, exact=True)

        # an invalid range
        result = RangeIndex.from_range(range(5, 1))
        expected = RangeIndex(0, 0, 1)
        tm.assert_index_equal(result, expected, exact=True)

        result = RangeIndex.from_range(range(5))
        expected = RangeIndex(0, 5, 1)
        tm.assert_index_equal(result, expected, exact=True)

        result = Index(range(1, 5, 2))
        expected = RangeIndex(1, 5, 2)
        tm.assert_index_equal(result, expected, exact=True)

        with pytest.raises(
            ValueError,
            match="Incorrect `dtype` passed: expected signed integer, received float64",
        ):
            Index(range(1, 5, 2), dtype="float64")
        msg = r"^from_range\(\) got an unexpected keyword argument"
        with pytest.raises(TypeError, match=msg):
            pd.RangeIndex.from_range(range(10), copy=True)
