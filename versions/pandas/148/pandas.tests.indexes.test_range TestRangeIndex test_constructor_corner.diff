# CLASS: class TestRangeIndex(Numeric):
import numpy as np
# BLOCK
import pandas.util.testing as tm
# BLOCK
import pytest
# BLOCK
from pandas import RangeIndex, Index
# BLOCK
from .test_numeric import Numeric
# BLOCK
    def test_constructor_corner(self):
        arr = np.array([1, 2, 3, 4], dtype=object)
        index = RangeIndex(1, 5)
        assert index.values.dtype == np.int64
        tm.assert_index_equal(index, Index(arr))

        # non-int raise Exception
        with pytest.raises(TypeError):
            RangeIndex("1", "10", "1")
        with pytest.raises(TypeError):
            RangeIndex(1.1, 10.2, 1.3)

        # invalid passed type
        with pytest.raises(
            ValueError,
            match="Incorrect `dtype` passed: expected signed integer, received float64",
        ):
            RangeIndex(1, 5, dtype="float64")
