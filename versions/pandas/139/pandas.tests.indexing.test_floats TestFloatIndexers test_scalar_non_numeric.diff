import pandas.util.testing as tm
# BLOCK
import numpy as np
# BLOCK
import pytest
# BLOCK
from pandas import Series, DataFrame
# BLOCK
    def test_scalar_non_numeric(self):

        # GH 4892
        # float_indexers should raise exceptions
        # on appropriate Index types & accessors

        for index in [
            tm.makeStringIndex,
            tm.makeUnicodeIndex,
            tm.makeCategoricalIndex,
            tm.makeDateIndex,
            tm.makeTimedeltaIndex,
            tm.makePeriodIndex,
        ]:

            i = index(5)

            for s in [
                Series(np.arange(len(i)), index=i),
                DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
            ]:

                # getting
                for idxr, getitem in [(lambda x: x.iloc, False), (lambda x: x, True)]:

                    # gettitem on a DataFrame is a KeyError as it is indexing
                    # via labels on the columns
                    if getitem and isinstance(s, DataFrame):
                        error = KeyError
                        msg = r"^3(\.0)?$"
                    else:
                        error = TypeError
                        msg = (
                            r"cannot do (label|index|positional) indexing"
                            r" on {klass} with these indexers \[3\.0\] of"
                            r" {kind}|"
                            "Cannot index by location index with a"
                            " non-integer key".format(klass=type(i), kind=str(float))
                        )
                    with pytest.raises(error, match=msg):
                        idxr(s)[3.0]

                # label based can be a TypeError or KeyError
                if s.index.inferred_type in {
                    "categorical",
                    "string",
                    "unicode",
                    "mixed",
                }:
                    error = KeyError
                    msg = r"^3$"
                else:
                    error = TypeError
                    msg = (
                        r"cannot do (label|index) indexing"
                        r" on {klass} with these indexers \[3\.0\] of"
                        r" {kind}".format(klass=type(i), kind=str(float))
                    )
                with pytest.raises(error, match=msg):
                    s.loc[3.0]

                # contains
                assert 3.0 not in s

                # setting with a float fails with iloc
                msg = (
                    r"cannot do (label|index|positional) indexing"
                    r" on {klass} with these indexers \[3\.0\] of"
                    r" {kind}".format(klass=type(i), kind=str(float))
                )
                with pytest.raises(TypeError, match=msg):
                    s.iloc[3.0] = 0

                # setting with an indexer
                if s.index.inferred_type in ["categorical"]:
                    # Value or Type Error
                    pass
                elif s.index.inferred_type in ["datetime64", "timedelta64", "period"]:

                    # these should prob work
                    # and are inconsisten between series/dataframe ATM
                    # for idxr in [lambda x: x.ix,
                    #             lambda x: x]:
                    #    s2 = s.copy()
                    #
                    #    with pytest.raises(TypeError):
                    #        idxr(s2)[3.0] = 0
                    pass

                else:

                    s2 = s.copy()
                    s2.loc[3.0] = 10
                    assert s2.index.is_object()

                    for idxr in [lambda x: x]:
                        s2 = s.copy()
                        idxr(s2)[3.0] = 0
                        assert s2.index.is_object()

            # fallsback to position selection, series only
            s = Series(np.arange(len(i)), index=i)
            s[3]
            msg = (
                r"cannot do (label|index) indexing"
                r" on {klass} with these indexers \[3\.0\] of"
                r" {kind}".format(klass=type(i), kind=str(float))
            )
            with pytest.raises(TypeError, match=msg):
                s[3.0]
