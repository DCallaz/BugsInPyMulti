# CLASS: class TestCategoricalDtype(Base):
from pandas.core.dtypes.common import is_string_dtype
# BLOCK
from pandas.core.dtypes.dtypes import CategoricalDtype
# BLOCK
import pytest
# BLOCK
class Base:
    def test_hash(self, dtype):
        hash(dtype)

    def test_equality_invalid(self, dtype):
        assert not dtype == "foo"
        assert not is_dtype_equal(dtype, np.int64)

    def test_numpy_informed(self, dtype):
        # npdev 2020-02-02 changed from "data type not understood" to
        #  "Cannot interpret 'foo' as a data type"
        msg = "|".join(
            ["data type not understood", "Cannot interpret '.*' as a data type"]
        )
        with pytest.raises(TypeError, match=msg):
            np.dtype(dtype)

        assert not dtype == np.str_
        assert not np.str_ == dtype

    def test_pickle(self, dtype):
        # make sure our cache is NOT pickled

        # clear the cache
        type(dtype).reset_cache()
        assert not len(dtype._cache)

        # force back to the cache
        result = tm.round_trip_pickle(dtype)
        assert not len(dtype._cache)
        assert result == dtype
# BLOCK
    def test_not_string(self):
        # though CategoricalDtype has object kind, it cannot be string
        assert not is_string_dtype(CategoricalDtype())
