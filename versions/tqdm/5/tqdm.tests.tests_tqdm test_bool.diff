from tqdm import tqdm, trange
# BLOCK
from tqdm.autonotebook import tqdm, trange
# BLOCK
from contextlib import closing
# BLOCK
from nose import with_setup
# BLOCK
import sys
# BLOCK
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO
# BLOCK
def posttest():
    if getattr(tqdm, "_instances", False):
        n = len(tqdm._instances)
        if n:
            tqdm._instances.clear()
            raise EnvironmentError(
                "{0} `tqdm` instances still in existence POST-test".format(n))
# BLOCK
def pretest():
    # setcheckinterval is deprecated
    getattr(sys, 'setswitchinterval', getattr(sys, 'setcheckinterval'))(100)

    if getattr(tqdm, "_instances", False):
        n = len(tqdm._instances)
        if n:
            tqdm._instances.clear()
            raise EnvironmentError(
                "{0} `tqdm` instances still in existence PRE-test".format(n))
# BLOCK
    def closing(arg):
        return arg
# BLOCK
@with_setup(pretest, posttest)
def test_bool():
    """Test boolean cast"""
    def internal(our_file, disable):
        with tqdm(total=10, file=our_file, disable=disable) as t:
            assert t
        with tqdm(total=0, file=our_file, disable=disable) as t:
            assert not t
        with trange(10, file=our_file, disable=disable) as t:
            assert t
        with trange(0, file=our_file, disable=disable) as t:
            assert not t
        with tqdm([], file=our_file, disable=disable) as t:
            assert not t
        with tqdm([0], file=our_file, disable=disable) as t:
            assert t
        with tqdm(file=our_file, disable=disable) as t:
            try:
                print(bool(t))
            except TypeError:
                pass
            else:
                raise TypeError(
                    "Expected tqdm() with neither total nor iterable to fail")

    # test with and without disable
    with closing(StringIO()) as our_file:
        internal(our_file, False)
        internal(our_file, True)
